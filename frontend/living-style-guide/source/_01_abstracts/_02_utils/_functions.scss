@use "sass:meta";
@use "sass:math";

/* ------------------------------------ *\
  #CONVERT-UNITS
\* ------------------------------------ */

/// Convert a given px unit to a rem unit
/// @param {Number} $px - Number with px unit
/// @return {Number} Number with rem unit
/// @access public
@function convert-rem($px) {
  @if unit($px) != "px" {
    @warn "Expected argument $px to be of type `px`, instead received: `#{unit($px)}`";
  }

  @if meta.function-exists("div", "math") {
    @return math.div($px, $default-font-size) * 1rem;
  } @else {
    @return ($px / $default-font-size) * 1rem;
  }
}

/// Convert a given px unit to a em unit
/// @param {Number} $px - Number with px unit
/// @return {Number} Number with em unit
/// @access public
@function convert-em($px) {
  @if unit($px) != "px" {
    @warn "Expected argument $px to be of type `px`, instead received: `#{unit($px)}`";
  }

  @if meta.function-exists("div", "math") {
    @return math.div($px, $default-font-size) * 1em;
  } @else {
    @return ($px / $default-font-size) * 1em;
  }
}

/* ------------------------------------ *\
  #COLOR
\* ------------------------------------ */

/// Retrieve color from SASS maps
/// @param {String} $color-definition - Variable name of SASS colors map
/// @param {String} $color-name - key-name of color in the SASS map
/// @access public
@function get-color($color-definition, $color-name) {
  @if (not map-get($color-definition, $color-name)) {
    @error "#{$color-name} is not a valid color color-name.";
  }
  @return map-get($color-definition, $color-name);
}

/* ------------------------------------ *\
  #FONT_WEIGHT
\* ------------------------------------ */

/// Retrieve font-weight from SASS maps
/// @param {String} $weight - Key-name of the font-weight
/// @access public
@function font-weight($weight) {
  @if (not map-get($font-weights, $weight)) {
    @error "#{$weight} is not a valid font weight.";
  }
  @return map-get($font-weights, $weight);
}
